
#Autogenerated file.  Edits will not persist.

import math

class sto_base(object):
    pass

class s(sto_base):
  def compute_value(self,alpha,v):
    x = v[0]
    y = v[1]
    z = v[2]
    r = math.sqrt(x * x + y * y + z * z)
    norm = 2**(3 / 4.0) * math.pi**(-3 / 4.0) * alpha**(3 / 4.0)
    val = norm * math.exp(-alpha * r)
    return val
  def compute_del(self,alpha,v):
    x = v[0]
    y = v[1]
    z = v[2]
    r = math.sqrt(x * x + y * y + z * z)
    norm = 2**(3 / 4.0) * math.pi**(-3 / 4.0) * alpha**(3 / 4.0)
    dx = -alpha * norm * x * r**-1 * math.exp(-alpha * r)
    dy = -alpha * norm * y * r**-1 * math.exp(-alpha * r)
    dz = -alpha * norm * z * r**-1 * math.exp(-alpha * r)
    return [dx,dy,dz]
  def compute_del_sq(self,alpha,v):
    x = v[0]
    y = v[1]
    z = v[2]
    r = math.sqrt(x * x + y * y + z * z)
    norm = 2**(3 / 4.0) * math.pi**(-3 / 4.0) * alpha**(3 / 4.0)
    del_sq = norm * ((alpha * z**2 * abs(r**-3) + -3 * alpha / r + alpha**2 * r**-2 * z**2 + alpha * y**2 * abs(r**-3) + alpha**2 * r**-2 * x**2 + alpha * x**2 * abs(r**-3) + alpha**2 * r**-2 * y**2) * math.exp(-alpha * r))
    return del_sq

class px(sto_base):
  def compute_value(self,alpha,v):
    x = v[0]
    y = v[1]
    z = v[2]
    r = math.sqrt(x * x + y * y + z * z)
    norm = 2 * 2**(3 / 4.0) * math.pi**(-3 / 4.0) * alpha**(5 / 4.0)
    val = norm * x * math.exp(-alpha * r)
    return val
  def compute_del(self,alpha,v):
    x = v[0]
    y = v[1]
    z = v[2]
    r = math.sqrt(x * x + y * y + z * z)
    norm = 2 * 2**(3 / 4.0) * math.pi**(-3 / 4.0) * alpha**(5 / 4.0)
    dx = norm * ((-alpha * r**-1 * x**2 + 1) * math.exp(-alpha * r))
    dy = -alpha * norm * x * y * r**-1 * math.exp(-alpha * r)
    dz = -alpha * norm * x * z * r**-1 * math.exp(-alpha * r)
    return [dx,dy,dz]
  def compute_del_sq(self,alpha,v):
    x = v[0]
    y = v[1]
    z = v[2]
    r = math.sqrt(x * x + y * y + z * z)
    norm = 2 * 2**(3 / 4.0) * math.pi**(-3 / 4.0) * alpha**(5 / 4.0)
    del_sq = norm * ((x * alpha**2 * r**-2 * z**2 + -5 * alpha * x / r + alpha * x * z**2 * abs(r**-3) + alpha * x * y**2 * abs(r**-3) + alpha * x**3 * abs(r**-3) + x * alpha**2 * r**-2 * y**2 + alpha**2 * r**-2 * x**3) * math.exp(-alpha * r))
    return del_sq

class py(sto_base):
  def compute_value(self,alpha,v):
    x = v[0]
    y = v[1]
    z = v[2]
    r = math.sqrt(x * x + y * y + z * z)
    norm = math.pi**(-3 / 4.0) * 2 * 2**(3 / 4.0) * alpha**(5 / 4.0)
    val = norm * y * math.exp(-alpha * r)
    return val
  def compute_del(self,alpha,v):
    x = v[0]
    y = v[1]
    z = v[2]
    r = math.sqrt(x * x + y * y + z * z)
    norm = math.pi**(-3 / 4.0) * 2 * 2**(3 / 4.0) * alpha**(5 / 4.0)
    dx = -alpha * norm * x * y * r**-1 * math.exp(-alpha * r)
    dy = norm * ((-alpha * r**-1 * y**2 + 1) * math.exp(-alpha * r))
    dz = -alpha * norm * y * z * r**-1 * math.exp(-alpha * r)
    return [dx,dy,dz]
  def compute_del_sq(self,alpha,v):
    x = v[0]
    y = v[1]
    z = v[2]
    r = math.sqrt(x * x + y * y + z * z)
    norm = math.pi**(-3 / 4.0) * 2 * 2**(3 / 4.0) * alpha**(5 / 4.0)
    del_sq = norm * ((-5 * alpha * y / r + alpha * y**3 * abs(r**-3) + y * alpha**2 * r**-2 * z**2 + alpha**2 * r**-2 * y**3 + y * alpha**2 * r**-2 * x**2 + alpha * y * z**2 * abs(r**-3) + alpha * y * x**2 * abs(r**-3)) * math.exp(-alpha * r))
    return del_sq

class pz(sto_base):
  def compute_value(self,alpha,v):
    x = v[0]
    y = v[1]
    z = v[2]
    r = math.sqrt(x * x + y * y + z * z)
    norm = 2 * 2**(3 / 4.0) * math.pi**(-3 / 4.0) * alpha**(5 / 4.0)
    val = norm * z * math.exp(-alpha * r)
    return val
  def compute_del(self,alpha,v):
    x = v[0]
    y = v[1]
    z = v[2]
    r = math.sqrt(x * x + y * y + z * z)
    norm = 2 * 2**(3 / 4.0) * math.pi**(-3 / 4.0) * alpha**(5 / 4.0)
    dx = -alpha * norm * x * z * r**-1 * math.exp(-alpha * r)
    dy = -alpha * norm * y * z * r**-1 * math.exp(-alpha * r)
    dz = norm * ((-alpha * r**-1 * z**2 + 1) * math.exp(-alpha * r))
    return [dx,dy,dz]
  def compute_del_sq(self,alpha,v):
    x = v[0]
    y = v[1]
    z = v[2]
    r = math.sqrt(x * x + y * y + z * z)
    norm = 2 * 2**(3 / 4.0) * math.pi**(-3 / 4.0) * alpha**(5 / 4.0)
    del_sq = norm * ((alpha * z * x**2 * abs(r**-3) + alpha * z**3 * abs(r**-3) + z * alpha**2 * r**-2 * x**2 + z * alpha**2 * r**-2 * y**2 + alpha**2 * r**-2 * z**3 + -5 * alpha * z / r + alpha * z * y**2 * abs(r**-3)) * math.exp(-alpha * r))
    return del_sq

class dx2(sto_base):
  def compute_value(self,alpha,v):
    x = v[0]
    y = v[1]
    z = v[2]
    r = math.sqrt(x * x + y * y + z * z)
    norm = 4 / 3.0 * 2**(1 / 4.0) * math.sqrt(6) * math.pi**(-3 / 4.0) * alpha**(7 / 4.0)
    val = norm * x**2 * math.exp(-alpha * r)
    return val
  def compute_del(self,alpha,v):
    x = v[0]
    y = v[1]
    z = v[2]
    r = math.sqrt(x * x + y * y + z * z)
    norm = 4 / 3.0 * 2**(1 / 4.0) * math.sqrt(6) * math.pi**(-3 / 4.0) * alpha**(7 / 4.0)
    dx = norm * ((2 * x - alpha * r**-1 * x**3) * math.exp(-alpha * r))
    dy = -alpha * norm * y * r**-1 * x**2 * math.exp(-alpha * r)
    dz = -alpha * norm * z * r**-1 * x**2 * math.exp(-alpha * r)
    return [dx,dy,dz]
  def compute_del_sq(self,alpha,v):
    x = v[0]
    y = v[1]
    z = v[2]
    r = math.sqrt(x * x + y * y + z * z)
    norm = 4 / 3.0 * 2**(1 / 4.0) * math.sqrt(6) * math.pi**(-3 / 4.0) * alpha**(7 / 4.0)
    del_sq = norm * ((-7 * alpha * r**-1 * x**2 + 2 + alpha**2 * r**-2 * x**2 * z**2 + alpha * x**4 * abs(r**-3) + alpha**2 * r**-2 * x**2 * y**2 + alpha * x**2 * z**2 * abs(r**-3) + alpha * x**2 * y**2 * abs(r**-3) + alpha**2 * r**-2 * x**4) * math.exp(-alpha * r))
    return del_sq

class dy2(sto_base):
  def compute_value(self,alpha,v):
    x = v[0]
    y = v[1]
    z = v[2]
    r = math.sqrt(x * x + y * y + z * z)
    norm = 2 / 3.0 * 2 * 2**(1 / 4.0) * math.sqrt(6) * math.pi**(-3 / 4.0) * alpha**(7 / 4.0)
    val = norm * y**2 * math.exp(-alpha * r)
    return val
  def compute_del(self,alpha,v):
    x = v[0]
    y = v[1]
    z = v[2]
    r = math.sqrt(x * x + y * y + z * z)
    norm = 2 / 3.0 * 2 * 2**(1 / 4.0) * math.sqrt(6) * math.pi**(-3 / 4.0) * alpha**(7 / 4.0)
    dx = -alpha * norm * x * r**-1 * y**2 * math.exp(-alpha * r)
    dy = norm * ((2 * y - alpha * r**-1 * y**3) * math.exp(-alpha * r))
    dz = -alpha * norm * z * r**-1 * y**2 * math.exp(-alpha * r)
    return [dx,dy,dz]
  def compute_del_sq(self,alpha,v):
    x = v[0]
    y = v[1]
    z = v[2]
    r = math.sqrt(x * x + y * y + z * z)
    norm = 2 / 3.0 * 2 * 2**(1 / 4.0) * math.sqrt(6) * math.pi**(-3 / 4.0) * alpha**(7 / 4.0)
    del_sq = norm * ((alpha**2 * r**-2 * y**4 + alpha**2 * r**-2 * y**2 * z**2 + -7 * alpha * r**-1 * y**2 + alpha * y**2 * z**2 * abs(r**-3) + 2 + alpha**2 * r**-2 * x**2 * y**2 + alpha * x**2 * y**2 * abs(r**-3) + alpha * y**4 * abs(r**-3)) * math.exp(-alpha * r))
    return del_sq

class dz2(sto_base):
  def compute_value(self,alpha,v):
    x = v[0]
    y = v[1]
    z = v[2]
    r = math.sqrt(x * x + y * y + z * z)
    norm = 4 / 3.0 * 2**(1 / 4.0) * math.sqrt(6) * math.pi**(-3 / 4.0) * alpha**(7 / 4.0)
    val = norm * z**2 * math.exp(-alpha * r)
    return val
  def compute_del(self,alpha,v):
    x = v[0]
    y = v[1]
    z = v[2]
    r = math.sqrt(x * x + y * y + z * z)
    norm = 4 / 3.0 * 2**(1 / 4.0) * math.sqrt(6) * math.pi**(-3 / 4.0) * alpha**(7 / 4.0)
    dx = -alpha * norm * x * r**-1 * z**2 * math.exp(-alpha * r)
    dy = -alpha * norm * y * r**-1 * z**2 * math.exp(-alpha * r)
    dz = norm * ((-alpha * r**-1 * z**3 + 2 * z) * math.exp(-alpha * r))
    return [dx,dy,dz]
  def compute_del_sq(self,alpha,v):
    x = v[0]
    y = v[1]
    z = v[2]
    r = math.sqrt(x * x + y * y + z * z)
    norm = 4 / 3.0 * 2**(1 / 4.0) * math.sqrt(6) * math.pi**(-3 / 4.0) * alpha**(7 / 4.0)
    del_sq = norm * ((alpha**2 * r**-2 * z**4 + alpha**2 * r**-2 * y**2 * z**2 + -7 * alpha * r**-1 * z**2 + alpha * y**2 * z**2 * abs(r**-3) + 2 + alpha**2 * r**-2 * x**2 * z**2 + alpha * x**2 * z**2 * abs(r**-3) + alpha * z**4 * abs(r**-3)) * math.exp(-alpha * r))
    return del_sq

class dxy(sto_base):
  def compute_value(self,alpha,v):
    x = v[0]
    y = v[1]
    z = v[2]
    r = math.sqrt(x * x + y * y + z * z)
    norm = 4 * 2**(3 / 4.0) * math.pi**(-3 / 4.0) * alpha**(7 / 4.0)
    val = norm * x * y * math.exp(-alpha * r)
    return val
  def compute_del(self,alpha,v):
    x = v[0]
    y = v[1]
    z = v[2]
    r = math.sqrt(x * x + y * y + z * z)
    norm = 4 * 2**(3 / 4.0) * math.pi**(-3 / 4.0) * alpha**(7 / 4.0)
    dx = norm * ((y - alpha * y * r**-1 * x**2) * math.exp(-alpha * r))
    dy = norm * ((-alpha * x * r**-1 * y**2 + x) * math.exp(-alpha * r))
    dz = -alpha * norm * x * y * z * r**-1 * math.exp(-alpha * r)
    return [dx,dy,dz]
  def compute_del_sq(self,alpha,v):
    x = v[0]
    y = v[1]
    z = v[2]
    r = math.sqrt(x * x + y * y + z * z)
    norm = 4 * 2**(3 / 4.0) * math.pi**(-3 / 4.0) * alpha**(7 / 4.0)
    del_sq = norm * ((-7 * alpha * x * y / r + x * y * alpha**2 * r**-2 * z**2 + y * alpha**2 * r**-2 * x**3 + alpha * x * y * z**2 * abs(r**-3) + alpha * y * x**3 * abs(r**-3) + alpha * x * y**3 * abs(r**-3) + x * alpha**2 * r**-2 * y**3) * math.exp(-alpha * r))
    return del_sq

class dxz(sto_base):
  def compute_value(self,alpha,v):
    x = v[0]
    y = v[1]
    z = v[2]
    r = math.sqrt(x * x + y * y + z * z)
    norm = 4 * 2**(3 / 4.0) * math.pi**(-3 / 4.0) * alpha**(7 / 4.0)
    val = norm * x * z * math.exp(-alpha * r)
    return val
  def compute_del(self,alpha,v):
    x = v[0]
    y = v[1]
    z = v[2]
    r = math.sqrt(x * x + y * y + z * z)
    norm = 4 * 2**(3 / 4.0) * math.pi**(-3 / 4.0) * alpha**(7 / 4.0)
    dx = norm * ((-alpha * z * r**-1 * x**2 + z) * math.exp(-alpha * r))
    dy = -alpha * norm * x * y * z * r**-1 * math.exp(-alpha * r)
    dz = norm * ((-alpha * x * r**-1 * z**2 + x) * math.exp(-alpha * r))
    return [dx,dy,dz]
  def compute_del_sq(self,alpha,v):
    x = v[0]
    y = v[1]
    z = v[2]
    r = math.sqrt(x * x + y * y + z * z)
    norm = 4 * 2**(3 / 4.0) * math.pi**(-3 / 4.0) * alpha**(7 / 4.0)
    del_sq = norm * ((x * z * alpha**2 * r**-2 * y**2 + z * alpha**2 * r**-2 * x**3 + -7 * alpha * x * z / r + alpha * z * x**3 * abs(r**-3) + alpha * x * z * y**2 * abs(r**-3) + x * alpha**2 * r**-2 * z**3 + alpha * x * z**3 * abs(r**-3)) * math.exp(-alpha * r))
    return del_sq

class dyz(sto_base):
  def compute_value(self,alpha,v):
    x = v[0]
    y = v[1]
    z = v[2]
    r = math.sqrt(x * x + y * y + z * z)
    norm = 4 * 2**(3 / 4.0) * math.pi**(-3 / 4.0) * alpha**(7 / 4.0)
    val = norm * y * z * math.exp(-alpha * r)
    return val
  def compute_del(self,alpha,v):
    x = v[0]
    y = v[1]
    z = v[2]
    r = math.sqrt(x * x + y * y + z * z)
    norm = 4 * 2**(3 / 4.0) * math.pi**(-3 / 4.0) * alpha**(7 / 4.0)
    dx = -alpha * norm * x * y * z * r**-1 * math.exp(-alpha * r)
    dy = norm * ((-alpha * z * r**-1 * y**2 + z) * math.exp(-alpha * r))
    dz = norm * ((y - alpha * y * r**-1 * z**2) * math.exp(-alpha * r))
    return [dx,dy,dz]
  def compute_del_sq(self,alpha,v):
    x = v[0]
    y = v[1]
    z = v[2]
    r = math.sqrt(x * x + y * y + z * z)
    norm = 4 * 2**(3 / 4.0) * math.pi**(-3 / 4.0) * alpha**(7 / 4.0)
    del_sq = norm * ((alpha * y * z**3 * abs(r**-3) + y * alpha**2 * r**-2 * z**3 + alpha * z * y**3 * abs(r**-3) + z * alpha**2 * r**-2 * y**3 + -7 * alpha * y * z / r + y * z * alpha**2 * r**-2 * x**2 + alpha * y * z * x**2 * abs(r**-3)) * math.exp(-alpha * r))
    return del_sq

class dx2y2(sto_base):
  def compute_value(self,alpha,v):
    x = v[0]
    y = v[1]
    z = v[2]
    r = math.sqrt(x * x + y * y + z * z)
    norm = 4 / 3.0 * 2**(1 / 4.0) * math.sqrt(6) * math.pi**(-3 / 4.0) * alpha**(7 / 4.0)
    val = norm * ((-y**2 + x**2) * math.exp(-alpha * r))
    return val
  def compute_del(self,alpha,v):
    x = v[0]
    y = v[1]
    z = v[2]
    r = math.sqrt(x * x + y * y + z * z)
    norm = 4 / 3.0 * 2**(1 / 4.0) * math.sqrt(6) * math.pi**(-3 / 4.0) * alpha**(7 / 4.0)
    dx = norm * ((-alpha * (x * ((r**-1) * (-y**2 + x**2))) + 2 * x) * math.exp(-alpha * r))
    dy = norm * ((-alpha * (y * ((r**-1) * (-y**2 + x**2))) - 2 * y) * math.exp(-alpha * r))
    dz = -alpha * (norm * (z * ((r**-1) * ((-y**2 + x**2) * math.exp(-alpha * r)))))
    return [dx,dy,dz]
  def compute_del_sq(self,alpha,v):
    x = v[0]
    y = v[1]
    z = v[2]
    r = math.sqrt(x * x + y * y + z * z)
    norm = 4 / 3.0 * 2**(1 / 4.0) * math.sqrt(6) * math.pi**(-3 / 4.0) * alpha**(7 / 4.0)
    del_sq = norm * (((alpha**2) * ((r**-2) * ((x**2) * (-y**2 + x**2))) + (alpha**2) * ((r**-2) * ((y**2) * (-y**2 + x**2))) + (alpha**2) * ((r**-2) * ((z**2) * (-y**2 + x**2))) + -4 * alpha * r**-1 * x**2 + -3 * (alpha * ((r**-1) * (-y**2 + x**2))) + alpha * ((x**2) * ((-y**2 + x**2) * abs(r**-3))) + alpha * ((y**2) * ((-y**2 + x**2) * abs(r**-3))) + alpha * ((z**2) * ((-y**2 + x**2) * abs(r**-3))) + 4 * alpha * r**-1 * y**2) * math.exp(-alpha * r))
    return del_sq

class d3z2r2(sto_base):
  def compute_value(self,alpha,v):
    x = v[0]
    y = v[1]
    z = v[2]
    r = math.sqrt(x * x + y * y + z * z)
    norm = 4 / 3.0 * 2**(1 / 4.0) * math.sqrt(6) * math.pi**(-3 / 4.0) * alpha**(7 / 4.0)
    val = norm * ((2 * z**2 + -x**2 - y**2) * math.exp(-alpha * r))
    return val
  def compute_del(self,alpha,v):
    x = v[0]
    y = v[1]
    z = v[2]
    r = math.sqrt(x * x + y * y + z * z)
    norm = 4 / 3.0 * 2**(1 / 4.0) * math.sqrt(6) * math.pi**(-3 / 4.0) * alpha**(7 / 4.0)
    dx = norm * ((-alpha * (x * ((r**-1) * (2 * z**2 + -x**2 - y**2))) - 2 * x) * math.exp(-alpha * r))
    dy = norm * ((-alpha * (y * ((r**-1) * (2 * z**2 + -x**2 - y**2))) - 2 * y) * math.exp(-alpha * r))
    dz = norm * ((4 * z - alpha * (z * ((r**-1) * (2 * z**2 + -x**2 - y**2)))) * math.exp(-alpha * r))
    return [dx,dy,dz]
  def compute_del_sq(self,alpha,v):
    x = v[0]
    y = v[1]
    z = v[2]
    r = math.sqrt(x * x + y * y + z * z)
    norm = 4 / 3.0 * 2**(1 / 4.0) * math.sqrt(6) * math.pi**(-3 / 4.0) * alpha**(7 / 4.0)
    del_sq = norm * (((alpha**2) * ((r**-2) * ((y**2) * (2 * z**2 + -x**2 - y**2))) + alpha * ((x**2) * ((2 * z**2 + -x**2 - y**2) * abs(r**-3))) + 4 * alpha * r**-1 * x**2 + -8 * alpha * r**-1 * z**2 + alpha * ((z**2) * ((2 * z**2 + -x**2 - y**2) * abs(r**-3))) + (alpha**2) * ((r**-2) * ((x**2) * (2 * z**2 + -x**2 - y**2))) + alpha * ((y**2) * ((2 * z**2 + -x**2 - y**2) * abs(r**-3))) + (alpha**2) * ((r**-2) * ((z**2) * (2 * z**2 + -x**2 - y**2))) + -3 * (alpha * ((r**-1) * (2 * z**2 + -x**2 - y**2))) + 4 * alpha * r**-1 * y**2) * math.exp(-alpha * r))
    return del_sq


